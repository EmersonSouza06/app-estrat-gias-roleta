import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { User, Target, AlertTriangle } from "lucide-react";

export default function SolitaryCalculator({ lastNumbers }) {
  const [analysis, setAnalysis] = useState(null);
  const solitarios = [13, 14];
  const redNumbers = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36];

  const getNumberColor = (num) => {
    if (num === 0) return "green";
    return redNumbers.includes(num) ? "red" : "black";
  };
  
  const analyzeSolitary = (numbers) => {
    const recs = [];
    if (numbers.length < 1) return { recs };

    const lastNum = numbers[numbers.length - 1];
    if (!solitarios.includes(lastNum)) return { recs };

    const lastColor = getNumberColor(lastNum);
    const oppositeColor = lastColor === 'red' ? 'Preto' : 'Vermelho';

    recs.push({
      type: 'solitario_ativado',
      description: `Solitário ${lastNum} (${lastColor}) saiu. A tendência é vir a cor oposta.`,
      bet: `Apostar na cor ${oppositeColor}`,
      confidence: 95
    });

    return { recs };
  };

  useEffect(() => {
    if (lastNumbers) {
      const numbers = lastNumbers.split(',').map(n => parseInt(n.trim())).filter(n => !isNaN(n));
      const result = analyzeSolitary(numbers);
      setAnalysis(result);
    }
  }, [lastNumbers]);

  return (
    <div className="space-y-6">
      <Card className="bg-zinc-800/30 border-zinc-700">
        <CardHeader>
          <CardTitle className="text-amber-400 flex items-center gap-2">
            <User className="w-5 h-5" />
            Estratégia dos Solitários
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-zinc-300 text-sm mb-4">Os números 13 e 14 são 'solitários'. Quase sempre eles vêm sozinhos. A estratégia se baseia em apostar na cor oposta à que o solitário saiu.</p>
           <div className="flex justify-center gap-4">
            <Badge className="text-xl px-4 py-2 bg-red-500/20 text-red-400 border-red-500/30">14</Badge>
            <Badge className="text-xl px-4 py-2 bg-zinc-500/20 text-zinc-300 border-zinc-500/30">13</Badge>
          </div>
        </CardContent>
      </Card>
      
      {analysis && analysis.recs.length > 0 && (
        <Card className="bg-blue-900/20 border-blue-800/30">
          <CardHeader>
            <CardTitle className="text-blue-400 flex items-center gap-2"><Target className="w-5 h-5" />Recomendação de Aposta</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
             {analysis.recs.map((rec, index) => (
              <div key={index} className="p-4 bg-blue-900/20 rounded-lg border border-blue-800/30">
                 <div className="flex items-start justify-between mb-2">
                  <p className="text-zinc-300 text-sm flex-1">{rec.description}</p>
                  <Badge className="bg-blue-500/20 text-blue-400 border-blue-500/30 ml-2">{rec.confidence}%</Badge>
                </div>
                <div className="mt-2 p-3 bg-amber-900/20 rounded-lg">
                    <p className="text-amber-400 font-semibold text-lg text-center">{rec.bet}</p>
                </div>
              </div>
            ))}
          </CardContent>
        </Card>
      )}
    </div>
  );
}