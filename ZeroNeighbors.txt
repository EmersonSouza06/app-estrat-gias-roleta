import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Circle, Target, AlertTriangle } from "lucide-react";

export default function ZeroNeighborsCalculator({ lastNumbers }) {
  const [analysis, setAnalysis] = useState(null);
  const [recommendations, setRecommendations] = useState([]);

  // N√∫meros vizinhos do zero na roleta f√≠sica
  const zeroNeighbors = [1, 5, 8, 11, 14, 23, 26, 32];
  
  const analyzeZeroNeighbors = (numbers) => {
    let neighborCount = 0;
    let lastNeighbors = [];
    let patterns = [];

    numbers.forEach((num, index) => {
      if (zeroNeighbors.includes(num)) {
        neighborCount++;
        lastNeighbors.push({ number: num, position: index });
      }
    });

    // An√°lise de padr√µes
    const recs = [];
    
    // Se sa√≠ram muitos vizinhos recentemente
    if (neighborCount >= 2) {
      recs.push({
        type: 'high_neighbor_activity',
        description: `${neighborCount} vizinhos do zero sa√≠ram recentemente. Alta probabilidade do zero aparecer.`,
        numbers: [0],
        confidence: 85
      });
    }

    // Se saiu um vizinho espec√≠fico
    const recentNeighbors = numbers.slice(-3).filter(n => zeroNeighbors.includes(n));
    if (recentNeighbors.length > 0) {
      recs.push({
        type: 'recent_neighbors',
        description: 'Vizinhos do zero est√£o ativos. Considere apostar no zero e em mais vizinhos.',
        numbers: [0, ...zeroNeighbors.filter(n => !recentNeighbors.includes(n))],
        confidence: 78
      });
    }

    // Padr√£o de troca de croupier
    if (numbers.length >= 5) {
      const last5 = numbers.slice(-5);
      const hasZeroNeighbor = last5.some(n => zeroNeighbors.includes(n));
      
      if (hasZeroNeighbor) {
        recs.push({
          type: 'croupier_pattern',
          description: 'Padr√£o detectado: ap√≥s vizinhos do zero, o pr√≥prio zero tende a aparecer.',
          numbers: [0],
          confidence: 90
        });
      }
    }

    return {
      neighborCount,
      lastNeighbors,
      totalNumbers: numbers.length,
      neighborPercentage: numbers.length > 0 ? (neighborCount / numbers.length * 100).toFixed(1) : 0,
      recs
    };
  };

  useEffect(() => {
    if (lastNumbers) {
      const numbers = lastNumbers.split(',')
        .map(n => parseInt(n.trim()))
        .filter(n => !isNaN(n) && n >= 0 && n <= 36);
      
      const result = analyzeZeroNeighbors(numbers);
      setAnalysis(result);
      setRecommendations(result.recs);
    }
  }, [lastNumbers]);

  return (
    <div className="space-y-6">
      {/* Explica√ß√£o */}
      <Card className="bg-zinc-800/30 border-zinc-700">
        <CardHeader>
          <CardTitle className="text-amber-400 flex items-center gap-2">
            <Circle className="w-5 h-5" />
            Vizinhos do Zero
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <p className="text-zinc-300 text-sm">
            Os n√∫meros vizinhos do zero na roleta f√≠sica s√£o estrat√©gicos. Quando eles aparecem 
            com frequ√™ncia, aumenta a probabilidade do pr√≥prio zero sair.
          </p>
          <div className="p-3 bg-emerald-900/20 rounded-lg">
            <p className="text-emerald-400 text-sm font-semibold mb-2">N√∫meros Vizinhos do Zero:</p>
            <div className="flex flex-wrap gap-2">
              {zeroNeighbors.map((num) => (
                <Badge 
                  key={num}
                  className="bg-emerald-500/20 text-emerald-400 border-emerald-500/30"
                >
                  {num}
                </Badge>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* An√°lise */}
      {analysis && (
        <Card className="bg-blue-900/20 border-blue-800/30">
          <CardHeader>
            <CardTitle className="text-blue-400">An√°lise Atual</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div className="text-center p-3 bg-blue-900/20 rounded-lg">
                <div className="text-2xl font-bold text-blue-400">{analysis.neighborCount}</div>
                <div className="text-xs text-zinc-400">Vizinhos Detectados</div>
              </div>
              <div className="text-center p-3 bg-blue-900/20 rounded-lg">
                <div className="text-2xl font-bold text-blue-400">{analysis.neighborPercentage}%</div>
                <div className="text-xs text-zinc-400">Frequ√™ncia de Vizinhos</div>
              </div>
              <div className="text-center p-3 bg-blue-900/20 rounded-lg">
                <div className="text-2xl font-bold text-blue-400">{analysis.totalNumbers}</div>
                <div className="text-xs text-zinc-400">N√∫meros Analisados</div>
              </div>
            </div>

            {analysis.lastNeighbors.length > 0 && (
              <div className="mt-4">
                <h4 className="text-sm font-semibold text-zinc-300 mb-2">√öltimos Vizinhos Identificados:</h4>
                <div className="flex flex-wrap gap-2">
                  {analysis.lastNeighbors.map((item, index) => (
                    <Badge 
                      key={index}
                      className="bg-amber-500/20 text-amber-400 border-amber-500/30"
                    >
                      {item.number}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Recomenda√ß√µes */}
      {recommendations.length > 0 && (
        <Card className="bg-emerald-900/20 border-emerald-800/30">
          <CardHeader>
            <CardTitle className="text-emerald-400 flex items-center gap-2">
              <Target className="w-5 h-5" />
              Estrat√©gias Recomendadas
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {recommendations.map((rec, index) => (
                <div key={index} className="p-4 bg-emerald-900/20 rounded-lg border border-emerald-800/30">
                  <div className="flex items-start justify-between mb-2">
                    <p className="text-zinc-300 text-sm flex-1">{rec.description}</p>
                    <Badge className="bg-emerald-500/20 text-emerald-400 border-emerald-500/30 ml-2">
                      {rec.confidence}% confian√ßa
                    </Badge>
                  </div>
                  {rec.type === 'high_neighbor_activity' && (
                    <div className="mt-3 p-3 bg-amber-900/20 rounded-lg">
                      <p className="text-amber-400 font-semibold text-sm">üéØ FOCO NO ZERO</p>
                      <Badge className="bg-green-500/20 text-green-400 border-green-500/30 font-bold mt-2">
                        0
                      </Badge>
                    </div>
                  )}
                  {rec.numbers.length > 1 && (
                    <div className="flex flex-wrap gap-1 mt-3">
                      {rec.numbers.slice(0, 10).map((num, idx) => (
                        <Badge 
                          key={idx}
                          className={num === 0 ? 
                            "bg-green-500/20 text-green-400 border-green-500/30 font-bold" :
                            "bg-blue-500/20 text-blue-400 border-blue-500/30 text-xs"
                          }
                        >
                          {num}
                        </Badge>
                      ))}
                      {rec.numbers.length > 10 && (
                        <Badge variant="outline" className="text-xs bg-zinc-800/50 border-zinc-700 text-zinc-400">
                          +{rec.numbers.length - 10}
                        </Badge>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Prote√ß√£o */}
      <Card className="bg-red-900/20 border-red-800/30">
        <CardHeader>
          <CardTitle className="text-red-400 flex items-center gap-2">
            <AlertTriangle className="w-5 h-5" />
            Dica Especial da Estrat√©gia
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="p-3 bg-red-900/20 rounded-lg">
            <p className="text-zinc-300 text-sm">
              <strong>Troca de Croupier:</strong> Sempre que trocar o croupier e vir um n√∫mero vizinho do "0", 
              h√° 85% de probabilidade de bater e a probabilidade √© de 85%!
            </p>
          </div>
          <div className="p-3 bg-yellow-900/20 rounded-lg border border-yellow-800/30">
            <p className="text-yellow-300 text-sm">
              <strong>Prote√ß√£o:</strong> Quando identificar o padr√£o, al√©m do zero, 
              considere apostar em alguns vizinhos como prote√ß√£o extra.
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}