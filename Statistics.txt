import React, { useState, useEffect } from "react";
import { NumberHistory } from "@/entities/all";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { BarChart3, TrendingUp, Target, Award } from "lucide-react";

export default function StatisticsPage() {
  const [numbers, setNumbers] = useState([]);
  const [stats, setStats] = useState(null);

  useEffect(() => {
    loadStatistics();
  }, []);

  const loadStatistics = async () => {
    const data = await NumberHistory.list("-created_date", 100);
    setNumbers(data);
    calculateStats(data);
  };

  const calculateStats = (data) => {
    if (data.length === 0) return;

    // Frequency analysis
    const frequency = {};
    const colorCount = { red: 0, black: 0, green: 0 };
    const recentPatterns = [];
    
    data.forEach(entry => {
      frequency[entry.number] = (frequency[entry.number] || 0) + 1;
      colorCount[entry.color]++;
    });

    // Most and least frequent numbers
    const sortedByFreq = Object.entries(frequency)
      .sort(([,a], [,b]) => b - a);
    
    const mostFrequent = sortedByFreq.slice(0, 5);
    const leastFrequent = sortedByFreq.slice(-5).reverse();

    // Hot and cold streaks
    const hotNumbers = mostFrequent.filter(([,count]) => count >= 3);
    const coldNumbers = [];
    for (let i = 0; i <= 36; i++) {
      if (!frequency[i] || frequency[i] <= 1) {
        coldNumbers.push([i.toString(), frequency[i] || 0]);
      }
    }

    // Recent patterns (last 20 numbers)
    const recent = data.slice(0, 20).map(n => n.number);
    const patterns = {
      consecutiveColors: 0,
      evenOddStreak: 0,
      highLowPattern: 0
    };

    setStats({
      totalSpins: data.length,
      frequency,
      colorCount,
      mostFrequent,
      leastFrequent,
      hotNumbers,
      coldNumbers: coldNumbers.slice(0, 5),
      patterns,
      recentNumbers: recent
    });
  };

  const getNumberColor = (num) => {
    if (num === 0) return "green";
    const redNumbers = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36];
    return redNumbers.includes(parseInt(num)) ? "red" : "black";
  };

  const getColorClass = (color) => {
    switch(color) {
      case "red": return "bg-red-500/20 text-red-400 border-red-500/30";
      case "black": return "bg-zinc-500/20 text-zinc-300 border-zinc-500/30";
      case "green": return "bg-green-500/20 text-green-400 border-green-500/30";
      default: return "bg-zinc-500/20 text-zinc-300 border-zinc-500/30";
    }
  };

  if (!stats) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-zinc-950 via-zinc-900 to-zinc-950 p-6">
        <div className="max-w-6xl mx-auto">
          <div className="text-center py-12">
            <BarChart3 className="w-16 h-16 text-zinc-600 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-zinc-400 mb-2">
              Carregando estatísticas...
            </h3>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-zinc-950 via-zinc-900 to-zinc-950 p-6">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header */}
        <div className="text-center space-y-6">
          <div className="flex items-center justify-center gap-3 mb-6">
            <BarChart3 className="w-12 h-12 text-amber-400" />
          </div>
          <h1 className="text-4xl font-bold text-transparent bg-gradient-to-r from-amber-400 via-yellow-500 to-amber-600 bg-clip-text">
            Estatísticas e Análises
          </h1>
          <p className="text-lg text-zinc-400 max-w-2xl mx-auto">
            Insights detalhados sobre padrões e tendências dos números
          </p>
        </div>

        {/* Overview Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <Card className="bg-zinc-900/50 border-zinc-800">
            <CardContent className="pt-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-amber-400">{stats.totalSpins}</div>
                <div className="text-sm text-zinc-400">Total de Giros</div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-red-900/20 border-red-800/30">
            <CardContent className="pt-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-red-400">{stats.colorCount.red}</div>
                <div className="text-sm text-zinc-400">Vermelhos</div>
                <div className="text-xs text-zinc-500 mt-1">
                  {((stats.colorCount.red / stats.totalSpins) * 100).toFixed(1)}%
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-zinc-800/30 border-zinc-700">
            <CardContent className="pt-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-zinc-300">{stats.colorCount.black}</div>
                <div className="text-sm text-zinc-400">Pretos</div>
                <div className="text-xs text-zinc-500 mt-1">
                  {((stats.colorCount.black / stats.totalSpins) * 100).toFixed(1)}%
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-green-900/20 border-green-800/30">
            <CardContent className="pt-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-green-400">{stats.colorCount.green}</div>
                <div className="text-sm text-zinc-400">Zeros</div>
                <div className="text-xs text-zinc-500 mt-1">
                  {((stats.colorCount.green / stats.totalSpins) * 100).toFixed(1)}%
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Hot and Cold Numbers */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card className="bg-orange-900/20 border-orange-800/30">
            <CardHeader>
              <CardTitle className="text-orange-400 flex items-center gap-2">
                <TrendingUp className="w-5 h-5" />
                Números Quentes
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-zinc-400 text-sm mb-4">
                Números que saíram com mais frequência
              </p>
              <div className="space-y-3">
                {stats.mostFrequent.map(([number, count], index) => (
                  <div key={number} className="flex items-center justify-between p-3 bg-orange-900/20 rounded-lg">
                    <div className="flex items-center gap-3">
                      <Badge className={`w-10 h-10 rounded-xl flex items-center justify-center font-bold ${getColorClass(getNumberColor(number))}`}>
                        {number}
                      </Badge>
                      <span className="text-zinc-300">#{index + 1}</span>
                    </div>
                    <div className="text-right">
                      <div className="text-orange-400 font-bold">{count}x</div>
                      <div className="text-xs text-zinc-500">
                        {((count / stats.totalSpins) * 100).toFixed(1)}%
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          <Card className="bg-blue-900/20 border-blue-800/30">
            <CardHeader>
              <CardTitle className="text-blue-400 flex items-center gap-2">
                <Target className="w-5 h-5" />
                Números Frios
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-zinc-400 text-sm mb-4">
                Números que saíram menos ou nunca saíram
              </p>
              <div className="space-y-3">
                {stats.coldNumbers.map(([number, count], index) => (
                  <div key={number} className="flex items-center justify-between p-3 bg-blue-900/20 rounded-lg">
                    <div className="flex items-center gap-3">
                      <Badge className={`w-10 h-10 rounded-xl flex items-center justify-center font-bold ${getColorClass(getNumberColor(number))}`}>
                        {number}
                      </Badge>
                      <span className="text-zinc-300">Frio #{index + 1}</span>
                    </div>
                    <div className="text-right">
                      <div className="text-blue-400 font-bold">{count}x</div>
                      <div className="text-xs text-zinc-500">
                        {count === 0 ? 'Nunca saiu' : 'Raro'}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Number Frequency Grid */}
        <Card className="bg-zinc-900/30 border-zinc-800">
          <CardHeader>
            <CardTitle className="text-zinc-100 flex items-center gap-2">
              <Award className="w-5 h-5" />
              Frequência de Todos os Números
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-6 sm:grid-cols-9 md:grid-cols-12 lg:grid-cols-13 gap-2">
              {Array.from({ length: 37 }, (_, i) => i).map(num => {
                const count = stats.frequency[num] || 0;
                const percentage = ((count / stats.totalSpins) * 100).toFixed(1);
                const isHot = count >= 3;
                const isCold = count <= 1;
                
                return (
                  <div 
                    key={num}
                    className="relative group cursor-pointer"
                    title={`${num}: ${count} vezes (${percentage}%)`}
                  >
                    <Badge 
                      className={`
                        w-12 h-12 rounded-xl flex items-center justify-center font-bold text-sm
                        ${getColorClass(getNumberColor(num))}
                        ${isHot ? 'ring-2 ring-orange-400' : ''}
                        ${isCold ? 'ring-2 ring-blue-400' : ''}
                        hover:scale-110 transition-all duration-200
                      `}
                    >
                      {num}
                    </Badge>
                    <div className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity">
                      <div className="bg-zinc-900 border border-zinc-700 rounded px-2 py-1">
                        <span className="text-xs text-zinc-300">{count}x</span>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
            <div className="mt-6 flex items-center gap-6 text-sm">
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 border-2 border-orange-400 rounded"></div>
                <span className="text-zinc-400">Números Quentes (3+ vezes)</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 border-2 border-blue-400 rounded"></div>
                <span className="text-zinc-400">Números Frios (≤1 vez)</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}